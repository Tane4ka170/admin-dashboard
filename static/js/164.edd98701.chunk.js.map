{"version":3,"file":"static/js/164.edd98701.chunk.js","mappings":"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","sources":["components/Auth/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport PageContainer from 'components/SharedComponents/PageContainer/PageContainer';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { authenticateUser } from '../../redux/auth/authOperations';\nimport * as yup from 'yup';\nimport {\n  BackgroundImage,\n  FormContainer,\n  FormInputWrapper,\n  FormTitle,\n  LogoContainer,\n  StyledForm,\n  StyledInput,\n  StyledLink,\n  TogglePasswordButton,\n} from './Auth.styled';\nimport Button from 'components/SharedComponents/Button/Button';\nimport logo from '../../assets/logo_log.png';\nimport pill from '../../assets/pill.png';\nimport sprite from '../../assets/sprite.svg';\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Invalid email address')\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Wrong email. Try again...')\n    .trim()\n    .required('Email is a required field'),\n  password: yup\n    .string()\n    .min(7, 'Minimum 7 characters')\n    .max(20, 'Maximum 20 characters')\n    .trim()\n    .required('Password is a required field'),\n});\n\nexport const LoginForm = () => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n    mode: 'onBlur',\n  });\n\n  const onSubmit = async data => {\n    try {\n      await dispatch(authenticateUser(data)).unwrap();\n      toast.success('Welcome back!');\n      reset();\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible(prevVisibility => !prevVisibility);\n  };\n\n  return (\n    <PageContainer>\n      <LogoContainer>\n        <img src={logo} alt=\"logo\" />\n        <span>E-Pharmacy</span>\n      </LogoContainer>\n      <FormContainer>\n        <FormTitle>\n          <h1>\n            Your medication, delivered. Say goodbye to all{' '}\n            <span>your healthcare</span> worries with us.\n          </h1>\n          <img src={pill} alt=\"pill\" />\n        </FormTitle>\n        <StyledForm onSubmit={handleSubmit(onSubmit)}>\n          <FormInputWrapper>\n            <StyledInput\n              {...register('email', { autoComplete: 'off' })}\n              placeholder=\"Email address\"\n              style={{ borderColor: errors.email ? '#E85050' : '#59b17a' }}\n            />\n            <p>{errors.email?.message}</p>\n          </FormInputWrapper>\n          <FormInputWrapper id=\"password\">\n            <StyledInput\n              {...register('password', { autoComplete: 'off' })}\n              type={isPasswordVisible ? 'text' : 'password'}\n              placeholder=\"Password\"\n              style={{ borderColor: errors.password ? '#E85050' : '#59b17a' }}\n            />\n            <p>{errors.password?.message}</p>\n            <TogglePasswordButton\n              onClick={togglePasswordVisibility}\n              type=\"button\"\n            >\n              <svg width=\"18\" height=\"18\" stroke=\"#1D1E21\" fill=\"none\">\n                <use\n                  href={\n                    isPasswordVisible\n                      ? `${sprite}#icon-eye`\n                      : `${sprite}#icon-eye-off`\n                  }\n                />\n              </svg>\n            </TogglePasswordButton>\n          </FormInputWrapper>\n          <Button prop=\"Log in\" $variant=\"login\" />\n          <StyledLink to=\"/register\">First time? Sign up</StyledLink>\n        </StyledForm>\n      </FormContainer>\n      <BackgroundImage />\n    </PageContainer>\n  );\n};\n","import { LoginForm } from 'components/Auth/LoginForm';\nimport React from 'react';\n\nexport default function LoginPage() {\n  return <LoginForm />;\n}\n"],"names":["validationSchema","yup","shape","email","matches","trim","required","password","min","max","LoginForm","_errors$email","_errors$password","_useState","useState","_useState2","_slicedToArray","isPasswordVisible","setIsPasswordVisible","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","mode","register","handleSubmit","errors","formState","reset","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","authenticateUser","unwrap","toast","t0","console","error","message","stop","_x","apply","arguments","_jsxs","PageContainer","children","LogoContainer","_jsx","src","logo","alt","FormContainer","FormTitle","pill","StyledForm","FormInputWrapper","StyledInput","_objectSpread","autoComplete","placeholder","style","borderColor","id","type","TogglePasswordButton","onClick","prevVisibility","width","height","stroke","fill","href","concat","sprite","Button","prop","$variant","StyledLink","to","BackgroundImage","LoginPage"],"sourceRoot":""}