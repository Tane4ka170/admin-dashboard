{"version":3,"file":"static/js/978.a021bc92.chunk.js","mappings":"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","sources":["components/Modal/EditProductModal/EditProductModal.jsx","components/Products/ProductInventory/ProductInventory.jsx","components/Modal/AddProductModal/AddProductModal.jsx","components/Products/ProductManager.jsx","pages/ProductsPage.jsx"],"sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport Select from 'react-select';\nimport { modifyProduct } from '../../../redux/pharmacy/pharmacyOperations';\nimport * as yup from 'yup';\nimport { ButtonContainer, Form, ModalContent } from '../Modal.styled';\nimport { FormInputWrapper, StyledInput } from 'components/Auth/Auth.styled';\nimport Button from 'components/SharedComponents/Button/Button';\n\nconst productSchema = yup.object({\n  name: yup.string().trim(),\n  category: yup.string(),\n  suppliers: yup.string().trim(),\n  stock: yup.number(),\n  price: yup.number(),\n});\n\nconst categoryOptions = [\n  { value: 'Medicine', label: 'Medicine' },\n  { value: 'Head', label: 'Head' },\n  { value: 'Hand', label: 'Hand' },\n  { value: 'Dental Care', label: 'Dental Care' },\n  { value: 'Skin Care', label: 'Skin Care' },\n  { value: 'Eye Care', label: 'Eye Care' },\n  { value: 'Vitamins & Supplements', label: 'Vitamins & Supplements' },\n  { value: 'Orthopedic Products', label: 'Orthopedic Products' },\n  { value: 'Baby Care', label: 'Baby Care' },\n];\n\nexport const EditProductModal = ({ onRequestClose, product }) => {\n  const dispatch = useDispatch();\n\n  const {\n    reset,\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(productSchema),\n  });\n\n  const onSubmit = data => {\n    dispatch(modifyProduct({ id: product._id, productData: data }));\n    reset();\n    onRequestClose();\n  };\n\n  return (\n    <ModalContent>\n      <h2>Edit data</h2>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <FormInputWrapper>\n          <StyledInput\n            {...register('name', { autoComplete: 'off' })}\n            placeholder=\"Product Info\"\n            style={{ borderColor: errors.name && '#E85050' }}\n            defaultValue={product.name}\n          />\n          <p>{errors.name?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <Controller\n            control={control}\n            name=\"category\"\n            rules={{ required: 'Category is a required field' }}\n            render={({ fieldState, field: { onChange, name, ref, value } }) => (\n              <Select\n                classNamePrefix=\"custom-select\"\n                status={fieldState.error ? 'error' : undefined}\n                name={name}\n                ref={ref}\n                options={categoryOptions}\n                placeholder={product.category}\n                value={categoryOptions.find(option => option.value === value)}\n                onChange={selectedOption => onChange(selectedOption?.value)}\n              />\n            )}\n          />\n          <p>{errors.category?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <StyledInput\n            {...register('suppliers', { autoComplete: 'off' })}\n            placeholder=\"Suppliers\"\n            style={{ borderColor: errors.suppliers && '#E85050' }}\n            defaultValue={product.suppliers}\n          />\n          <p>{errors.suppliers?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <StyledInput\n            {...register('stock', { autoComplete: 'off' })}\n            placeholder=\"Stock\"\n            style={{ borderColor: errors.stock && '#E85050' }}\n            defaultValue={product.stock}\n          />\n          <p>{errors.stock?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <StyledInput\n            {...register('price', { autoComplete: 'off' })}\n            placeholder=\"Price\"\n            style={{ borderColor: errors.price && '#E85050' }}\n            defaultValue={product.price}\n          />\n          <p>{errors.price?.message}</p>\n        </FormInputWrapper>\n\n        <ButtonContainer>\n          <Button prop=\"Save\" $variant=\"save\" />\n          <Button\n            prop=\"Cancel\"\n            $variant=\"cancel\"\n            onClick={() => {\n              reset();\n              onRequestClose();\n            }}\n          />\n        </ButtonContainer>\n      </Form>\n    </ModalContent>\n  );\n};\n","import {\n  HeaderCell,\n  ImageCell,\n  SubHeaderCell,\n} from 'components/Dashboard/RecentCustomersTable/RecentCustomersTable.styled';\nimport {\n  OrdersTableStyled,\n  PaginationWrapper,\n  TableContainer,\n} from 'components/Orders/OrdersOverview/OrdersOverview.styled';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchProducts,\n  removeProduct,\n} from '../../../redux/pharmacy/pharmacyOperations';\nimport { selectProducts } from '../../../redux/pharmacy/pharmacySelectors';\nimport {\n  ActionButtonWrapper,\n  EditButton,\n  DeleteButton,\n  TooltipWrapper,\n  TooltipText,\n} from './ProductInventory.styled';\nimport sprite from '../../../assets/sprite.svg';\nimport noImg from '../../../assets/noImg.jpg';\nimport { ModalWrapper } from 'components/Modal/ModalWrapper';\nimport { EditProductModal } from 'components/Modal/EditProductModal/EditProductModal';\n\nexport const ProductInventory = () => {\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [currentProduct, setCurrentProduct] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const dispatch = useDispatch();\n  const productList = useSelector(selectProducts);\n\n  const totalPagesCount = Math.ceil(productList.total / 5);\n\n  const handlePreviousPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (currentPage < totalPagesCount) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const showEditModal = product => {\n    setModalVisible(true);\n    setCurrentProduct(product);\n    document.body.style.overflow = 'hidden';\n  };\n\n  const hideModal = () => {\n    setModalVisible(false);\n    document.body.style.overflow = '';\n  };\n\n  useEffect(() => {\n    dispatch(fetchProducts({ page: currentPage }));\n  }, [dispatch, currentPage]);\n\n  return (\n    <>\n      <TableContainer>\n        <OrdersTableStyled>\n          <thead>\n            <tr>\n              <HeaderCell colSpan=\"6\">All Products</HeaderCell>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <SubHeaderCell>Product Info</SubHeaderCell>\n              <SubHeaderCell>Category</SubHeaderCell>\n              <SubHeaderCell>Stock</SubHeaderCell>\n              <SubHeaderCell>Suppliers</SubHeaderCell>\n              <SubHeaderCell>Price</SubHeaderCell>\n              <SubHeaderCell>Actions</SubHeaderCell>\n            </tr>\n            {productList.result?.map(product => (\n              <tr key={product._id}>\n                <ImageCell>\n                  <img src={product.image || noImg} alt=\"product\" />\n                  <span>{product.name}</span>\n                </ImageCell>\n                <td>{product.category}</td>\n                <td>{product.stock}</td>\n                <td>{product.suppliers}</td>\n                <td>{product.price}</td>\n                <td>\n                  <ActionButtonWrapper>\n                    <TooltipWrapper>\n                      <EditButton onClick={() => showEditModal(product)}>\n                        <svg>\n                          <use href={`${sprite}#icon-edit`} />\n                        </svg>\n                      </EditButton>\n                      <TooltipText>Click to edit</TooltipText>\n                    </TooltipWrapper>\n\n                    <TooltipWrapper>\n                      <DeleteButton\n                        onClick={() => dispatch(removeProduct(product._id))}\n                      >\n                        <svg>\n                          <use href={`${sprite}#icon-trash`} />\n                        </svg>\n                      </DeleteButton>\n                      <TooltipText>You`re about to delete an item!</TooltipText>\n                    </TooltipWrapper>\n                  </ActionButtonWrapper>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </OrdersTableStyled>\n      </TableContainer>\n      <PaginationWrapper>\n        <button\n          type=\"button\"\n          onClick={handlePreviousPage}\n          disabled={currentPage === 1}\n        >\n          🔼\n        </button>\n        <p>\n          <span>{currentPage}</span> / {totalPagesCount}\n        </p>\n        <button\n          type=\"button\"\n          onClick={handleNextPage}\n          disabled={currentPage === totalPagesCount}\n        >\n          🔽\n        </button>\n      </PaginationWrapper>\n      {isModalVisible && (\n        <ModalWrapper isOpen={isModalVisible} onRequestClose={hideModal}>\n          <EditProductModal\n            onRequestClose={hideModal}\n            product={currentProduct}\n          />\n        </ModalWrapper>\n      )}\n    </>\n  );\n};\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport Select from 'react-select';\nimport { createProduct } from '../../../redux/pharmacy/pharmacyOperations';\nimport * as yup from 'yup';\nimport { ButtonContainer, Form, ModalContent } from '../Modal.styled';\nimport { FormInputWrapper, StyledInput } from 'components/Auth/Auth.styled';\nimport Button from 'components/SharedComponents/Button/Button';\n\nconst productSchema = yup.object({\n  name: yup.string().trim().required('Name is required field'),\n  category: yup\n    .string()\n    .oneOf(\n      [\n        'Medicine',\n        'Head',\n        'Hand',\n        'Dental Care',\n        'Skin Care',\n        'Eye Care',\n        'Vitamins & Supplements',\n        'Orthopedic Products',\n        'Baby Care',\n      ],\n      'Invalid Job Type'\n    )\n    .required('Category is required field'),\n  suppliers: yup.string().trim().required('Suppliers is required field'),\n  stock: yup.number().required('Stock is required field'),\n  price: yup.number().required('Price is required field'),\n});\n\nconst categoryOptions = [\n  { value: 'Medicine', label: 'Medicine' },\n  { value: 'Head', label: 'Head' },\n  { value: 'Hand', label: 'Hand' },\n  { value: 'Dental Care', label: 'Dental Care' },\n  { value: 'Skin Care', label: 'Skin Care' },\n  { value: 'Eye Care', label: 'Eye Care' },\n  { value: 'Vitamins & Supplements', label: 'Vitamins & Supplements' },\n  { value: 'Orthopedic Products', label: 'Orthopedic Products' },\n  { value: 'Baby Care', label: 'Baby Care' },\n];\n\nexport const AddProductModal = ({ onRequestClose }) => {\n  const dispatch = useDispatch();\n\n  const {\n    reset,\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(productSchema),\n  });\n\n  const onSubmit = data => {\n    dispatch(createProduct(data));\n    reset();\n    onRequestClose();\n  };\n\n  return (\n    <ModalContent>\n      <h2>Add a new product</h2>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <FormInputWrapper>\n          <StyledInput\n            {...register('name', { autoComplete: 'off' })}\n            placeholder=\"Product Info\"\n            style={{ borderColor: errors.name && '#E85050' }}\n          />\n          <p>{errors.name?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <Controller\n            control={control}\n            name=\"category\"\n            rules={{ required: 'Status is required field' }}\n            render={({ fieldState, field: { onChange, name, ref, value } }) => (\n              <Select\n                classNamePrefix=\"custom-select\"\n                status={fieldState.error ? 'error' : undefined}\n                name={name}\n                ref={ref}\n                options={categoryOptions}\n                placeholder=\"Category\"\n                value={categoryOptions.find(option => option.value === value)}\n                onChange={selectedOption => onChange(selectedOption?.value)}\n              />\n            )}\n          />\n          <p>{errors.category?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <StyledInput\n            {...register('suppliers', { autoComplete: 'off' })}\n            placeholder=\"Suppliers\"\n            style={{ borderColor: errors.suppliers && '#E85050' }}\n          />\n          <p>{errors.suppliers?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <StyledInput\n            {...register('stock', { autoComplete: 'off' })}\n            placeholder=\"Stock\"\n            style={{ borderColor: errors.stock && '#E85050' }}\n          />\n          <p>{errors.stock?.message}</p>\n        </FormInputWrapper>\n\n        <FormInputWrapper>\n          <StyledInput\n            {...register('price', { autoComplete: 'off' })}\n            placeholder=\"Price\"\n            style={{ borderColor: errors.price && '#E85050' }}\n          />\n          <p>{errors.price?.message}</p>\n        </FormInputWrapper>\n\n        <ButtonContainer>\n          <Button prop=\"Add\" $variant=\"add\" />\n          <Button\n            prop=\"Cancel\"\n            $variant=\"cancel\"\n            onClick={() => {\n              reset();\n              onRequestClose();\n            }}\n          />\n        </ButtonContainer>\n      </Form>\n    </ModalContent>\n  );\n};\n","import { FormWrapper, InputField } from 'components/Orders/Orders.styled';\nimport PageContainer from 'components/SharedComponents/PageContainer/PageContainer';\nimport Sidebar from 'components/Sidebar/Sidebar';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { fetchProducts } from '../../redux/pharmacy/pharmacyOperations';\nimport { ButtonAdd, FlexWrap, FormContainer } from './ProductManager.styled';\nimport Button from 'components/SharedComponents/Button/Button';\nimport sprite from '../../assets/sprite.svg';\nimport { ProductInventory } from './ProductInventory/ProductInventory';\nimport { ModalWrapper } from 'components/Modal/ModalWrapper';\nimport { AddProductModal } from 'components/Modal/AddProductModal/AddProductModal';\n\nexport const ProductManager = () => {\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [isFilterActive, setFilterActive] = useState(false);\n  const dispatch = useDispatch();\n\n  const screenWidth = window.innerWidth;\n\n  const { reset, register, handleSubmit } = useForm({\n    mode: 'onBlur',\n  });\n\n  const handleFormSubmit = data => {\n    setFilterActive(!isFilterActive);\n    dispatch(fetchProducts(data));\n    reset();\n  };\n\n  const handleInputFocus = () => {\n    setFilterActive(false);\n  };\n\n  const showModal = () => {\n    setModalVisible(true);\n    document.body.style.overflow = 'hidden';\n  };\n\n  const hideModal = () => {\n    setModalVisible(false);\n    document.body.style.overflow = '';\n  };\n\n  return (\n    <>\n      <PageContainer>\n        {screenWidth > 1439 && <Sidebar />}\n        <FormContainer>\n          <FormWrapper onSubmit={handleSubmit(handleFormSubmit)}>\n            <InputField\n              {...register('name', { autoComplete: 'off' })}\n              placeholder=\"Product Name\"\n              onFocus={handleInputFocus}\n            />\n            <Button\n              icon={!isFilterActive}\n              prop={isFilterActive ? 'Reset' : 'Filter'}\n              $variant={isFilterActive ? 'add-sup' : 'filter'}\n            />\n          </FormWrapper>\n          <FlexWrap>\n            <ButtonAdd onClick={showModal}>\n              <svg>\n                <use href={`${sprite}#icon-plus`} />\n              </svg>\n            </ButtonAdd>\n            <span>Add a new product</span>\n          </FlexWrap>\n        </FormContainer>\n        <ProductInventory />\n      </PageContainer>\n      <ModalWrapper isOpen={isModalVisible} onRequestClose={hideModal}>\n        <AddProductModal onRequestClose={hideModal} />\n      </ModalWrapper>\n    </>\n  );\n};\n","import { ProductManager } from 'components/Products/ProductManager';\nimport React from 'react';\n\nexport default function ProductsPage() {\n  return <ProductManager />;\n}\n"],"names":["productSchema","yup","name","trim","category","suppliers","stock","price","categoryOptions","value","label","EditProductModal","_ref","_errors$name","_errors$category","_errors$suppliers","_errors$stock","_errors$price","onRequestClose","product","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","reset","register","handleSubmit","control","errors","formState","_jsxs","ModalContent","children","_jsx","Form","onSubmit","data","modifyProduct","id","_id","productData","FormInputWrapper","StyledInput","_objectSpread","autoComplete","placeholder","style","borderColor","defaultValue","message","Controller","rules","required","render","_ref2","fieldState","_ref2$field","field","onChange","ref","Select","classNamePrefix","status","error","undefined","options","find","option","selectedOption","ButtonContainer","Button","prop","$variant","onClick","ProductInventory","_productList$result","_useState","useState","_useState2","_slicedToArray","isModalVisible","setModalVisible","_useState3","_useState4","currentProduct","setCurrentProduct","_useState5","_useState6","currentPage","setCurrentPage","productList","useSelector","selectProducts","totalPagesCount","Math","ceil","total","hideModal","document","body","overflow","useEffect","fetchProducts","page","_Fragment","TableContainer","OrdersTableStyled","HeaderCell","colSpan","SubHeaderCell","result","map","ImageCell","src","image","noImg","alt","ActionButtonWrapper","TooltipWrapper","EditButton","showEditModal","href","concat","sprite","TooltipText","DeleteButton","removeProduct","PaginationWrapper","type","disabled","ModalWrapper","isOpen","oneOf","AddProductModal","createProduct","ProductManager","isFilterActive","setFilterActive","screenWidth","window","innerWidth","mode","PageContainer","Sidebar","FormContainer","FormWrapper","InputField","onFocus","icon","FlexWrap","ButtonAdd","ProductsPage"],"sourceRoot":""}