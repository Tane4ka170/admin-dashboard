{"version":3,"file":"static/js/330.b5182f8a.chunk.js","mappings":"8WAyBMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJE,MAAM,yBACNC,QAAQ,mCAAoC,6BAC5CC,OACAC,SAAS,qBACZC,SAAUN,EAAAA,KAEPO,IAAI,EAAG,wBACPC,IAAI,GAAI,yBACRJ,OACAC,SAAS,0BAGDI,EAAe,WAC1B,IAAAC,GAAkDC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DI,EAAiBF,EAAA,GAAEG,EAAoBH,EAAA,GACxCI,GAAWC,EAAAA,EAAAA,MAEjBC,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYtB,GACtBuB,KAAM,WANNC,EAAQL,EAARK,SACAC,EAAYN,EAAZM,aACaC,EAAMP,EAAnBQ,UAAaD,OACbE,EAAKT,EAALS,MAMIC,EAAQ,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAI,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEjBpB,GAASqB,EAAAA,EAAAA,IAAaJ,IAAOK,SAAS,KAAD,EAC3CC,EAAAA,GAAAA,QAAc,4BACdZ,IAAQO,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAERK,EAAAA,GAAAA,MAAYL,EAAAM,GAAMC,SAAS,yBAAAP,EAAAQ,OAAA,GAAAV,EAAA,kBAE9B,gBARaW,GAAA,OAAAd,EAAAe,MAAA,KAAAC,UAAA,KAcd,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAAAC,SAAA,EACZF,EAAAA,EAAAA,MAACG,EAAAA,GAAa,CAAAD,SAAA,EACZE,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAMC,IAAI,qBACpBH,EAAAA,EAAAA,KAAA,QAAAF,SAAM,mBAERF,EAAAA,EAAAA,MAACQ,EAAAA,GAAa,CAAAN,SAAA,EACZF,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,iDAC6C,KAC/CE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,oBAAsB,uBAE9BE,EAAAA,EAAAA,KAAA,OAAKC,IAAKK,EAAWH,IAAI,aAE3BP,EAAAA,EAAAA,MAACW,EAAAA,GAAU,CAAC7B,SAAUJ,EAAaI,GAAUoB,SAAA,EAC3CF,EAAAA,EAAAA,MAACY,EAAAA,GAAgB,CAAAV,SAAA,EACfE,EAAAA,EAAAA,KAACS,EAAAA,IAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNrC,EAAS,UAAQ,IACrBsC,YAAY,gBACZC,MAAO,CAAEC,YAAatC,EAAOvB,MAAQ,UAAY,cAElDuB,EAAOvB,QAASgD,EAAAA,EAAAA,KAAA,KAAAF,SAAIvB,EAAOvB,MAAMuC,cAEpCK,EAAAA,EAAAA,MAACY,EAAAA,GAAgB,CAACM,GAAG,WAAUhB,SAAA,EAC7BE,EAAAA,EAAAA,KAACS,EAAAA,IAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNrC,EAAS,aAAW,IACxB0C,KAAMnD,EAAoB,OAAS,WACnC+C,YAAY,WACZC,MAAO,CAAEC,YAAatC,EAAOnB,SAAW,UAAY,cAErDmB,EAAOnB,WAAY4C,EAAAA,EAAAA,KAAA,KAAAF,SAAIvB,EAAOnB,SAASmC,WACxCS,EAAAA,EAAAA,KAACgB,EAAAA,GAAoB,CACnBC,QApCqB,WAC/BpD,GAAqB,SAAAqD,GAAS,OAAKA,CAAS,GAC9C,EAmCYH,KAAK,SAAQjB,UAEbE,EAAAA,EAAAA,KAAA,OAAKmB,MAAM,KAAKC,OAAO,KAAKC,OAAO,UAAUC,KAAK,OAAMxB,UACtDE,EAAAA,EAAAA,KAAA,OACEuB,KACmB,GAAAC,OACVC,EAAAA,EADP7D,EACc,YACA,2BAMxBoC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACC,KAAK,WAAWC,SAAS,QAAO9B,SAAC,cAGzCE,EAAAA,EAAAA,KAAC6B,EAAAA,GAAU,CAACC,GAAG,SAAQhC,SAAC,+CAK5BE,EAAAA,EAAAA,KAAC+B,EAAAA,GAAe,MAGtB,EC1He,SAASC,IACtB,OAAOhC,EAAAA,EAAAA,KAACzC,EAAY,GACtB,C","sources":["components/Auth/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport logo from '../../assets/logo_log.png';\nimport pillImage from '../../assets/pill.png';\nimport iconSet from '../../assets/sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { registerUser } from '../../redux/auth/authOperations';\nimport PageContainer from 'components/SharedComponents/PageContainer/PageContainer';\nimport {\n  BackgroundImage,\n  FormContainer,\n  FormInputWrapper,\n  FormTitle,\n  LogoContainer,\n  StyledForm,\n  StyledInput,\n  StyledLink,\n  TogglePasswordButton,\n} from './Auth.styled';\nimport Button from 'components/SharedComponents/Button/Button';\n\nconst validationSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Invalid email address')\n    .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Wrong email. Try again...')\n    .trim()\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(7, 'Minimum 7 characters')\n    .max(20, 'Maximum 20 characters')\n    .trim()\n    .required('Password is required'),\n});\n\nexport const RegisterForm = () => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n    mode: 'onBlur',\n  });\n\n  const onSubmit = async data => {\n    try {\n      await dispatch(registerUser(data)).unwrap();\n      toast.success('Registration successful!');\n      reset();\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible(prevState => !prevState);\n  };\n\n  return (\n    <PageContainer>\n      <LogoContainer>\n        <img src={logo} alt=\"E-Pharmacy Logo\" />\n        <span>E-Pharmacy</span>\n      </LogoContainer>\n      <FormContainer>\n        <FormTitle>\n          <h1>\n            Your medication, delivered. Say goodbye to all{' '}\n            <span>your healthcare</span> worries with us\n          </h1>\n          <img src={pillImage} alt=\"Pill\" />\n        </FormTitle>\n        <StyledForm onSubmit={handleSubmit(onSubmit)}>\n          <FormInputWrapper>\n            <StyledInput\n              {...register('email')}\n              placeholder=\"Email address\"\n              style={{ borderColor: errors.email ? '#E85050' : '#59b17a' }}\n            />\n            {errors.email && <p>{errors.email.message}</p>}\n          </FormInputWrapper>\n          <FormInputWrapper id=\"password\">\n            <StyledInput\n              {...register('password')}\n              type={isPasswordVisible ? 'text' : 'password'}\n              placeholder=\"Password\"\n              style={{ borderColor: errors.password ? '#E85050' : '#59b17a' }}\n            />\n            {errors.password && <p>{errors.password.message}</p>}\n            <TogglePasswordButton\n              onClick={togglePasswordVisibility}\n              type=\"button\"\n            >\n              <svg width=\"18\" height=\"18\" stroke=\"#1D1E21\" fill=\"none\">\n                <use\n                  href={\n                    isPasswordVisible\n                      ? `${iconSet}#icon-eye`\n                      : `${iconSet}#icon-eye-off`\n                  }\n                />\n              </svg>\n            </TogglePasswordButton>\n          </FormInputWrapper>\n          <Button prop=\"Register\" $variant=\"login\">\n            Register\n          </Button>\n          <StyledLink to=\"/login\">\n            Already have an account? Login now!\n          </StyledLink>\n        </StyledForm>\n      </FormContainer>\n      <BackgroundImage />\n    </PageContainer>\n  );\n};\n","import { RegisterForm } from 'components/Auth/RegisterForm';\nimport React from 'react';\n\nexport default function RegisterPage() {\n  return <RegisterForm />;\n}\n"],"names":["validationSchema","yup","shape","email","matches","trim","required","password","min","max","RegisterForm","_useState","useState","_useState2","_slicedToArray","isPasswordVisible","setIsPasswordVisible","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","mode","register","handleSubmit","errors","formState","reset","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","registerUser","unwrap","toast","t0","message","stop","_x","apply","arguments","_jsxs","PageContainer","children","LogoContainer","_jsx","src","logo","alt","FormContainer","FormTitle","pillImage","StyledForm","FormInputWrapper","StyledInput","_objectSpread","placeholder","style","borderColor","id","type","TogglePasswordButton","onClick","prevState","width","height","stroke","fill","href","concat","iconSet","Button","prop","$variant","StyledLink","to","BackgroundImage","RegisterPage"],"sourceRoot":""}